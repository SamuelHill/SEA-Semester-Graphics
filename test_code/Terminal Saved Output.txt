Last login: Sun Aug  2 07:52:28 on console
Samuels-MacBook-Pro:~ SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> exit
Use exit() or Ctrl-D (i.e. EOF) to exit
>>> 
Samuels-MacBook-Pro:~ SamHill$ cd Desktop/SEA/Directed_Ocean_Research/Programs/
Samuels-MacBook-Pro:Programs SamHill$ ls
ADCP_quiver_graph.py		ETOPO_topography_graph.py	sam				trig_converter.py
ADCP_txt_files			PIPA_GIS			test_graphing.py
Samuels-MacBook-Pro:Programs SamHill$ cd sam/
Samuels-MacBook-Pro:sam SamHill$ ls
S254_ADCP.nc		Untitled.py		adcp.npz		adcp2.npz		netCDF4-1.1.1		plt_vect_S254.2.py	plt_vect_S254.py
Samuels-MacBook-Pro:sam SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> import sys
>>> import numpy as np
>>> import numpy.ma as ma
>>> import matplotlib.pyplot as plt
>>> from mpl_toolkits.mplot3d import Axes3D
>>> 
>>> npf=np.load("adcp2.npz")
>>> X=npf['X']
>>> Y=npf['Y']
>>> Ea=npf['Ea']
>>> No=npf['No']
>>> mag=npf['mag']
>>> deg=npf['deg']
>>> Ea.shape
(1324, 20)
>>> max(X)
190.25638
>>> Something = np.where(np.logical_and(X>185,X<190))
>>> Something.shape
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'shape'
>>> Something
(array([   0,    1,    2, ..., 1321, 1322, 1323]),)
>>> Y = Ea[Something]
>>> Y
array([[ -51.,  -35.,  -31., ...,   27.,   42.,   51.],
       [ -75.,  -52.,  -38., ...,   53.,   50.,   48.],
       [-283., -230., -186., ...,   49.,   49.,   14.],
       ..., 
       [-165., -147., -137., ..., -225., -229., -209.],
       [-123., -111., -119., ..., -348., -331., -283.],
       [ -66.,  -66.,  -75., ..., -296., -295., -243.]], dtype=float32)
>>> Xx = X[Something]
>>> Xx
array([ 188.90467834,  188.90458679,  188.86543274, ...,  185.68074036,
        185.68443298,  185.69056702], dtype=float32)
>>> min(Xx)
185.00084
>>> max(Xx)
189.99518
>>> Xx[0]
188.90468
>>> d = np.arrage(0,200,10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'arrage'
>>> d = np.arange(0,200,10)
>>> d
array([  0,  10,  20,  30,  40,  50,  60,  70,  80,  90, 100, 110, 120,
       130, 140, 150, 160, 170, 180, 190])
>>> m = Ea.shape
>>> m
(1324, 20)
>>> Z = np.zeros(m)
>>> Z
array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       ..., 
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
>>> Z.shape
(1324, 20)
>>> d
array([  0,  10,  20,  30,  40,  50,  60,  70,  80,  90, 100, 110, 120,
       130, 140, 150, 160, 170, 180, 190])
>>> d.shape
(20,)
>>> Ea
array([[ -51.,  -35.,  -31., ...,   27.,   42.,   51.],
       [ -75.,  -52.,  -38., ...,   53.,   50.,   48.],
       [-283., -230., -186., ...,   49.,   49.,   14.],
       ..., 
       [-165., -147., -137., ..., -225., -229., -209.],
       [-123., -111., -119., ..., -348., -331., -283.],
       [ -66.,  -66.,  -75., ..., -296., -295., -243.]], dtype=float32)
>>> Zz = np.tile(d, Z)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/SamHill/anaconda/lib/python2.7/site-packages/numpy/lib/shape_base.py", line 853, in tile
    c = _nx.array(A, copy=False, subok=True, ndmin=d)
ValueError: ndmin bigger than allowable number of dimensions NPY_MAXDIMS (=32)
>>> d
array([  0,  10,  20,  30,  40,  50,  60,  70,  80,  90, 100, 110, 120,
       130, 140, 150, 160, 170, 180, 190])
>>> Zz = np.tile(d.shape[0],1)
>>> Zz.shape
(1,)
>>> Zz = np.tile(Z,(d.shape[0],1))
>>> Zz.shape
(26480, 20)
>>> Zz = np.tile(d,(d.shape[0],1))
>>> Zz.shape
(20, 20)
>>> Zz = np.tile(d,(Ea.shape[0],1))
>>> Zz.shape
(1324, 20)
>>> Zz
array([[  0,  10,  20, ..., 170, 180, 190],
       [  0,  10,  20, ..., 170, 180, 190],
       [  0,  10,  20, ..., 170, 180, 190],
       ..., 
       [  0,  10,  20, ..., 170, 180, 190],
       [  0,  10,  20, ..., 170, 180, 190],
       [  0,  10,  20, ..., 170, 180, 190]])
>>> W = np.zeros((1324,20))
>>> W.shape
(1324, 20)
>>> W
array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       ..., 
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
>>> X
array([ 188.90467834,  188.90458679,  188.86543274, ...,  185.68074036,
        185.68443298,  185.69056702], dtype=float32)
>>> 360 - X
array([ 171.09532166,  171.09541321,  171.13456726, ...,  174.31925964,
        174.31556702,  174.30943298], dtype=float32)
>>> -360 + X
array([-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
       -174.31556702, -174.30943298], dtype=float32)
>>> Y
array([[ -51.,  -35.,  -31., ...,   27.,   42.,   51.],
       [ -75.,  -52.,  -38., ...,   53.,   50.,   48.],
       [-283., -230., -186., ...,   49.,   49.,   14.],
       ..., 
       [-165., -147., -137., ..., -225., -229., -209.],
       [-123., -111., -119., ..., -348., -331., -283.],
       [ -66.,  -66.,  -75., ..., -296., -295., -243.]], dtype=float32)
>>> exit
Use exit() or Ctrl-D (i.e. EOF) to exit
>>> exit()
Samuels-MacBook-Pro:sam SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> import numpy as np
>>> npf=np.load("adcp2.npz")
>>> X_pre=npf['X']
>>> X_pre
array([ 188.90467834,  188.90458679,  188.86543274, ...,  185.68074036,
        185.68443298,  185.69056702], dtype=float32)
>>> X = -360 + X_pre
>>> X
array([-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
       -174.31556702, -174.30943298], dtype=float32)
>>> X.shape
(1324,)
>>> Y=npf['Y']
>>> Y
array([-3.10784245, -3.10802722, -3.12532258, ..., -4.93778133,
       -4.94461536, -4.97386074], dtype=float32)
>>> Y.shape
(1324,)
>>> min(Y)
-4.9738607
>>> max(Y)
-1.0058453
>>> U=npf['Ea']
>>> U[0].shape
(20,)
>>> d = np.arange(0,-200,10) #could be -600 depth as well
>>> m = U.shape
>>> Z = np.zeros(m)
>>> Zz = np.tile(d,(Ea.shape[0],1))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Ea' is not defined
>>> Zz = np.tile(d,(U.shape[0],1))
>>> Zz
array([], shape=(1324, 0), dtype=int64)
>>> Zz.shape
(1324, 0)
>>> d = np.arange(0,-200,-10)
>>> d.shape
(20,)
>>> d
array([   0,  -10,  -20,  -30,  -40,  -50,  -60,  -70,  -80,  -90, -100,
       -110, -120, -130, -140, -150, -160, -170, -180, -190])
>>> Zz = np.tile(d,(Ea.shape[0],1))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Ea' is not defined
>>> Zz = np.tile(d,(U.shape[0],1))
>>> Zz
array([[   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       ..., 
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190]])
>>> Zz.shape
(1324, 20)
>>> d = np.arange(0,-200,-10)
>>> m = U.shape
>>> Z = np.zeros(m)
>>> Zz = np.tile(d,(U.shape[0],1))
>>> Zz
array([[   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       ..., 
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190]])
>>> z = np.tile(d,(U.shape[0],1))
>>> z
array([[   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       ..., 
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190]])
>>> z.shape
(1324, 20)
>>> j = np.tile(d,(m[0],1))
>>> j
array([[   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       ..., 
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190],
       [   0,  -10,  -20, ..., -170, -180, -190]])
>>> j.shape
(1324, 20)
>>> W = np.zeros(m)
>>> W
array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       ..., 
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
>>> W.shape
(1324, 20)
>>> X
array([-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
       -174.31556702, -174.30943298], dtype=float32)
>>> b = [0,1,2,3]
>>> a = np.array(b)
>>> a
array([0, 1, 2, 3])
>>> A = np.tile(a,(1,20))
>>> A
array([[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
        2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
        0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
        2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]])
>>> A = np.tile(a,(A.shape,20))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/SamHill/anaconda/lib/python2.7/site-packages/numpy/lib/shape_base.py", line 860, in tile
    c = c.reshape(-1, n).repeat(nrep, 0)
ValueError: a.shape[axis] != len(repeats)
>>> A = np.tile(a,(A.shape[0],20))
>>> A
array([[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
        2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
        0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
        2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]])
>>> A = np.tile(a,2)
>>> A
array([0, 1, 2, 3, 0, 1, 2, 3])
>>> A = np.tile(a,(2,1))
>>> A
array([[0, 1, 2, 3],
       [0, 1, 2, 3]])
>>> A = np.tile(a,(20,1))
>>> A
array([[0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3]])
>>> A = np.tile(a,(1,20))
>>> A
array([[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
        2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
        0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
        2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]])
>>> A = np.tile(a,(1,1,20))
>>> A
array([[[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
         2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
         0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
         2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]]])
>>> A = np.tile(a,(1,20,1))
>>> A
array([[[0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3]]])
>>> A = np.tile(a,(1,20))
>>> A = np.repeat(a, 20, axis=1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/SamHill/anaconda/lib/python2.7/site-packages/numpy/core/fromnumeric.py", line 393, in repeat
    return repeat(repeats, axis)
ValueError: axis(=1) out of bounds
>>> A = np.repeat(a, 20)
>>> A
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
>>> A = np.repeat(a, 20, axis=0)
>>> A
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])
>>> A = np.column_stack((a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a))
>>> A
array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
       [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]])
>>> x_s = tuple(a)
>>> a
array([0, 1, 2, 3])
>>> x_s
(0, 1, 2, 3)
>>> x_s = tuple([X])
>>> x_s
(array([-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
       -174.31556702, -174.30943298], dtype=float32),)
>>> x_s = tuple([X])
>>> for i in range(0,(m[1])-1):
... x_s.append([X])
  File "<stdin>", line 2
    x_s.append([X])
      ^
IndentationError: expected an indented block
>>> for i in range(0,(m[1])-1):
...     x_s.append([X])
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
AttributeError: 'tuple' object has no attribute 'append'
>>> 
  [Restored]
Last login: Mon Aug  3 16:18:51 on console
Samuels-MacBook-Pro:sam SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> import numpy as np
>>> npf=np.load("adcp2.npz")
>>> X_pre = npf['X']
>>> X = -360 + X_pre
>>> X
array([-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
       -174.31556702, -174.30943298], dtype=float32)
>>> X_tiled = np.tile(X,(20,1))
>>> X_tiled
array([[-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
        -174.31556702, -174.30943298],
       [-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
        -174.31556702, -174.30943298],
       [-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
        -174.31556702, -174.30943298],
       ..., 
       [-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
        -174.31556702, -174.30943298],
       [-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
        -174.31556702, -174.30943298],
       [-171.09532166, -171.09541321, -171.13456726, ..., -174.31925964,
        -174.31556702, -174.30943298]], dtype=float32)
>>> X_tiled.shape
(20, 1324)
>>> X_new = np.transpose(X_tiled)
>>> X_new
array([[-171.09532166, -171.09532166, -171.09532166, ..., -171.09532166,
        -171.09532166, -171.09532166],
       [-171.09541321, -171.09541321, -171.09541321, ..., -171.09541321,
        -171.09541321, -171.09541321],
       [-171.13456726, -171.13456726, -171.13456726, ..., -171.13456726,
        -171.13456726, -171.13456726],
       ..., 
       [-174.31925964, -174.31925964, -174.31925964, ..., -174.31925964,
        -174.31925964, -174.31925964],
       [-174.31556702, -174.31556702, -174.31556702, ..., -174.31556702,
        -174.31556702, -174.31556702],
       [-174.30943298, -174.30943298, -174.30943298, ..., -174.30943298,
        -174.30943298, -174.30943298]], dtype=float32)
>>> X_new.shape
(1324, 20)
>>> X= np.transpose(X_tiled)
>>> X
array([[-171.09532166, -171.09532166, -171.09532166, ..., -171.09532166,
        -171.09532166, -171.09532166],
       [-171.09541321, -171.09541321, -171.09541321, ..., -171.09541321,
        -171.09541321, -171.09541321],
       [-171.13456726, -171.13456726, -171.13456726, ..., -171.13456726,
        -171.13456726, -171.13456726],
       ..., 
       [-174.31925964, -174.31925964, -174.31925964, ..., -174.31925964,
        -174.31925964, -174.31925964],
       [-174.31556702, -174.31556702, -174.31556702, ..., -174.31556702,
        -174.31556702, -174.31556702],
       [-174.30943298, -174.30943298, -174.30943298, ..., -174.30943298,
        -174.30943298, -174.30943298]], dtype=float32)
>>> 
  [Restored]
Last login: Mon Aug  3 17:52:24 on console
Samuels-MacBook-Pro:sam SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> last_bin = ((20 - 1) * -10) - 18
>>> last_bin
-208
>>> np.arange(-18, last_bin, -10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'np' is not defined
>>> import numpy as np
>>> np.arange(-18, last_bin, -10)
array([ -18,  -28,  -38,  -48,  -58,  -68,  -78,  -88,  -98, -108, -118,
       -128, -138, -148, -158, -168, -178, -188, -198])
>>> d = import numpy as np
  File "<stdin>", line 1
    d = import numpy as np
             ^
SyntaxError: invalid syntax
>>> d = np.arange(-18, last_bin, -10)
>>> d.shape
(19,)
>>> d
array([ -18,  -28,  -38,  -48,  -58,  -68,  -78,  -88,  -98, -108, -118,
       -128, -138, -148, -158, -168, -178, -188, -198])
>>> last_bin = (m[1] * -10) - 18
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'm' is not defined
>>> last_bin = (20 * -10) - 18
>>> d = np.arange(-18, last_bin, -10)
>>> d
array([ -18,  -28,  -38,  -48,  -58,  -68,  -78,  -88,  -98, -108, -118,
       -128, -138, -148, -158, -168, -178, -188, -198, -208])
>>> d.shape
(20,)
>>> exit()
Samuels-MacBook-Pro:sam SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> import numpy as np
>>> last_bin = (20 * -10) - 18
>>> d_meters = np.arange(-18, last_bin, -10)
>>> d = d_meters / 111120
>>> d
array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1])
>>> d = d_meters / 111120.0
>>> d
array([-0.00016199, -0.00025198, -0.00034197, -0.00043197, -0.00052196,
       -0.00061195, -0.00070194, -0.00079194, -0.00088193, -0.00097192,
       -0.00106192, -0.00115191, -0.0012419 , -0.00133189, -0.00142189,
       -0.00151188, -0.00160187, -0.00169186, -0.00178186, -0.00187185])
>>> min(d)
-0.0018718502519798417
>>> max(d)
-0.00016198704103671707
>>> npf=np.load("adcpS261_all_depths.npz")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/SamHill/anaconda/lib/python2.7/site-packages/numpy/lib/npyio.py", line 369, in load
    fid = open(file, "rb")
IOError: [Errno 2] No such file or directory: 'adcpS261_all_depths.npz'
>>> exit()
Samuels-MacBook-Pro:sam SamHill$ cd..
-bash: cd..: command not found
Samuels-MacBook-Pro:sam SamHill$ cd ..
Samuels-MacBook-Pro:test_code SamHill$ cd ..
Samuels-MacBook-Pro:Programs SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> import numpy as np
>>> npf=np.load("adcpS261_all_depths.npz")
>>> U=npf['Ea']
>>> U
array([[  4.10000000e+01,   3.40000000e+01,   3.00000000e+01, ...,
         -1.61500000e+02,  -2.32000000e+02,  -1.05500000e+02],
       [ -2.40000000e+01,  -3.40000000e+01,  -3.20000000e+01, ...,
         -1.85000000e+02,  -7.95000000e+01,  -2.47500000e+02],
       [ -2.80000000e+01,  -2.40000000e+01,  -3.10000000e+01, ...,
         -1.51000000e+02,  -1.40500000e+02,  -2.18500000e+02],
       ..., 
       [ -1.30000000e+02,  -1.49000000e+02,  -2.00000000e+02, ...,
         -2.50000000e+00,  -1.48000000e+02,   3.56000000e+02],
       [ -1.49000000e+02,  -1.80000000e+02,  -2.31000000e+02, ...,
         -1.45000000e+01,  -2.13000000e+02,  -6.13000000e+02],
       [ -1.40000000e+02,  -1.69000000e+02,  -2.51000000e+02, ...,
         -1.22500000e+02,   1.42000000e+02,  -1.00000000e+10]], dtype=float32)
>>> max(U)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
>>> min(U)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
>>> min(U.all())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'numpy.bool_' object is not iterable
>>> min(U).any
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
>>> min(U).any()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
>>> a.any(max(U))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined
>>> U.any()
True
>>> max(U.any())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'numpy.bool_' object is not iterable
>>> U.shape
(622, 54)
>>> 622 * 54
33588
>>> exit()
Samuels-MacBook-Pro:Programs SamHill$ cd ..
Samuels-MacBook-Pro:Directed_Ocean_Research SamHill$ cd Programs/
Samuels-MacBook-Pro:Programs SamHill$ cd ..
Samuels-MacBook-Pro:Directed_Ocean_Research SamHill$ ls
Dynamic-Earth-Liam_appletv.m4v	Programs			Proposal.docx			References
Samuels-MacBook-Pro:Directed_Ocean_Research SamHill$ cd Programs/
Samuels-MacBook-Pro:Programs SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> list_dialects()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'list_dialects' is not defined
>>> exit()
Samuels-MacBook-Pro:Programs SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> x = 187
>>> 187 - 360
-173
>>> exit()
Samuels-MacBook-Pro:Programs SamHill$ cd ..
Samuels-MacBook-Pro:Directed_Ocean_Research SamHill$ cd Programs/
Samuels-MacBook-Pro:Programs SamHill$ ls
adcp.py			adcpS261_all_depths.npz	ctd_HC_binned.npz	ctd_HC_raw.npz		etopo.py		etopo_windslow.npz
adcpS261.npz		ctd_HC.py		ctd_HC_converter.py	data_sources		etopo_converter.py	test_code
Samuels-MacBook-Pro:Programs SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> import numpy as np
>>> npf2 = np.load("ctd_HC_binned.npz")
>>> temp_bin = npf2['temp']
>>> max(temp_bin)
30.4559
>>> min(temp_bin)
6.5634499999999996
>>> import matplotlib.pyplot as plt
>>> import matplotlib.colors as clr
>>> clr.Colormap('Reds')
<matplotlib.colors.Colormap object at 0x104580050>
>>> g = clr.Normalize(temp_bin)
>>> g
<matplotlib.colors.Normalize object at 0x1045800d0>
>>> temp_bin[g]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices
>>> g.process_value(temp_bin)
(masked_array(data = [ 29.97656     29.89441818  29.82357     29.72123     29.61004     29.45418889
  28.89996364  28.23771111  27.78298     26.82286364  25.73447     25.06036
  23.15747     21.32857     18.7368      16.72475     15.92995556
  15.39765455  14.7768      13.99402727  13.20118     12.64432222
  11.83456364  11.19642222  10.90009     10.69556     10.5324      10.39967
  10.3107      10.17625556  10.08538     10.00309      9.88871818
   9.84666667   9.78888182   9.73368      9.58603333   9.45925      9.30373636
   9.09235556   8.93739091   8.74095556   8.61585454   8.47778889
   8.39589091   8.2087       8.06322      7.98623636   7.94438      7.87523333
   7.78714546   7.68472222   7.6604       7.63766667   7.55813      7.43941
  30.16992727  30.16882     30.13273     30.15671     30.11947778
  29.98783636  29.77614444  29.58772727  29.02516     28.37972     27.46698
  27.04875     26.16613333  23.79464     20.21448182  18.52976667  17.37596
  15.83005455  14.68467     13.01957     12.60402222  12.14701818  11.68835
  11.49214444  11.16060909  10.70395556  10.49130909  10.27682     10.10636
   9.9473       9.78003      9.67497      9.58769091   9.5188       9.48161818
   9.46928      9.4011       9.33032727   9.23785556   9.12879      8.98888
   8.85278182   8.71349      8.50846667   8.33964      8.20267273
   8.17391111   8.08104      7.93702      7.77745      7.72056      7.62049091
   7.49743      7.43928889   7.40435      7.34424      7.28255      7.19962727
  30.10458182  30.09812222  30.09614545  30.12243     30.16453333  30.16459
  30.1803      29.35749     28.79034444  28.4315      27.92582727  27.2293
  26.40667     24.44485455  20.8139      18.49324     16.38964     14.82201
  13.41217778  12.65541     12.07312     11.40316     11.03295     10.86176
  10.67055455  10.4419      10.34108     10.28843     10.27483     10.2244
  10.14806667  10.06299091   9.94388889   9.90377273   9.87403      9.80238
   9.75966      9.74708889   9.65335      9.5464       9.47881818   9.45791
   9.40277      9.29885      9.16609      9.01882222   8.8795       8.67948889
   8.46724546   8.13085556   7.90187      7.62349      7.46829091   7.37497
   7.19667778   7.08206364   6.99776     30.19495     30.19970909  30.17078
  30.13779     30.127       30.22082     30.10584444  29.31713     28.65025455
  27.91774444  26.82038     25.88102727  24.24985556  23.18661     21.92831818
  19.12667     15.66444     14.43742     13.27856     12.23208889
  11.42451818  11.16974     11.04172     10.99901111  10.91405455
  10.75896667  10.64501     10.59828182  10.5318      10.48826667  10.43804
  10.35661     10.22901     10.11263636  10.03643333   9.96255454   9.85358
   9.77511111   9.71347273   9.55135      9.47994      9.43571      9.3337
   9.2188       9.1155       8.95277778   8.78411818   8.66036      8.50167
   8.32092222   8.04417273   7.7818       7.42355455   7.1593       6.84277
   6.79897778   6.77698182  30.2985      30.24726     30.18959091
  30.13035556  30.26707     30.44577     30.19012727  28.92036     28.12156667
  27.68388     27.2706      26.36482     25.38171     23.62100909
  21.22406667  18.01861     15.91922     15.03643636  14.06563333  13.25404
  12.33918     12.05101     11.85749091  11.45797     11.1898      11.00517273
  10.91391     10.82943     10.7578      10.69306364  10.6305      10.53746364
  10.45638889  10.36282     10.3097      10.26747     10.11723333
  10.03718182  10.00506      9.9631       9.91862222   9.90068182   9.82491
   9.66125      9.49025      9.30931111   9.14553      8.87907      8.54493636
   8.22567      7.93167778   7.69467273   7.3491       7.06505454   6.8771
   6.83999091   6.80981      6.80617778  30.33326     30.32594444  30.30283
  30.26442     30.19545     30.23504545  30.18125556  28.81018     28.03610909
  27.04076     26.32842     25.26044     24.00298     22.04555     19.01834
  16.45026     14.53516667  13.74376     13.39852     13.01891     12.52294
  12.10103636  11.68491111  11.42501818  11.12411     10.92351     10.80854
  10.78692222  10.75503636  10.64897778  10.56215455  10.42191     10.37386667
  10.31562727  10.2241      10.1233       9.9846       9.85878      9.77407778
   9.60277273   9.49587778   9.16928182   8.83932222   8.62280909   8.4058
   8.13216364   7.94444444   7.81417273   7.61774444   7.42839      7.16741
   6.93563      6.86566      6.83961818   6.79311111   6.76786364   6.73891
  30.32781     30.32195     30.26249     30.19415455  30.18811111  30.24735
  30.31694     29.85670909  28.26096667  27.76397273  27.05521     26.35145
  25.68807778  23.40938182  20.14717     17.04897778  15.29740909
  13.57357778  12.47325455  12.25161111  12.01476     11.6723      11.35929
  11.11737273  10.92227     10.84402     10.77437778  10.70526     10.6794
  10.63664     10.56962     10.50855     10.41369     10.33567273
  10.31153333  10.2319      10.11963636  10.0613      10.02896      9.96614545
   9.89874444   9.83277      9.73327273   9.68432222   9.56005454
   9.39462222   9.22683      8.88305      8.66378182   8.26237      7.93338
   7.69059      7.38671111   7.04630909   6.88317778   6.82505455
   6.81958889  30.24612222  30.19041     30.18781818  30.24793333  30.45012
  30.12588     29.4867      29.13410909  28.7961      28.34541111
  27.91315455  27.34024444  26.23681     23.13474545  19.36251111  16.58336
  14.68115     14.00154     12.77761818  11.66641     11.50785     11.42563
  11.26745556  10.95691     10.86956364  10.82078889  10.76584545
  10.69434444  10.63290909  10.54897778  10.44276364  10.36343333
  10.27886364  10.20736     10.14042222  10.09699091   9.9976       9.8622
   9.66796      9.55157      9.49054      9.44738889   9.31841818   9.21154
   9.16491      8.95655      8.79106667   8.66211818   8.5233       8.15547273
   7.94692222   7.69819      7.44494546   7.29334      6.97301111
   6.82448182   6.8029      30.35451818  30.34334444  30.27607273
  30.22072222  30.19629     30.37945     30.12285     29.25699     28.56072727
  28.11021111  27.47817273  26.52745     25.37186     22.89303333  19.93778
  17.72709     16.45015     14.68658     13.47807273  13.02096667  12.89183
  12.70713636  12.19377     11.7222      11.45891818  11.116       10.94191
  10.82347     10.75141     10.71362     10.6617      10.53905     10.43879091
  10.37803333  10.31902     10.26109091  10.21768889  10.09426364   9.95789
   9.81225      9.73568      9.63659      9.55427      9.35103      9.00166667
   8.77231      8.59417      8.35052      7.95412      7.54551818   7.33374
   7.1628       6.93246364   6.86414444   6.8539       6.79132      6.74434546
   6.71435556  30.3226      30.28743333  30.21823636  30.20776     30.34635556
  30.27842727  29.86783333  28.84771     28.33684     28.00802727  27.05175
  26.32121111  24.71238182  21.47325556  18.52023     16.63619     15.04455
  14.03655     13.66685455  12.6211      12.04752     11.77202222
  11.70079091  11.431       11.19225455  10.97595     10.88995556  10.83432
  10.77351     10.72663636  10.70499     10.69398889  10.65648     10.58028182
  10.47645     10.43756     10.42595556  10.38220909  10.15421      9.93025556
   9.85966      9.84501      9.70051818   9.51435556   9.32310909   8.92158
   8.60711      8.38949      8.23246667   7.86388182   7.66487778
   7.59782727   7.5574       7.43529091   7.13055      6.90733      6.8347
  30.19182222  30.20379     30.19441818  30.18885556  30.22639     30.34873
  30.4559      29.87147     29.34135     28.8023      28.24692727  27.71328
  26.13205556  23.63541     20.44009091  18.35461     15.51135     14.54553
  13.31501111  12.68760909  12.25551111  11.75754     11.32932     11.10273
  10.97484545  10.91248889  10.8485      10.71998     10.59277273  10.49285
  10.42459     10.32123     10.23476667  10.2035      10.08051111  10.03259
   9.84616667   9.70371111   9.60804545   9.54006667   9.47988182   9.35124
   9.15079      9.04026      8.80375556   8.36020909   7.95016667
   7.81070909   7.69085556   7.67585      7.53697273   7.32598      7.00474444
   6.84379      6.76018182   6.69907778   6.65174546   6.56345     30.24434444
  30.23339091  30.17903     30.17517778  30.1649      30.21311818  29.83751
  29.59342222  29.1739      28.92854     28.61123     28.14996     26.58123
  23.07556364  20.47326     18.14759     16.15279     15.11062     14.46863
  13.86001111  12.94745455  11.84387778  11.28396     10.95902     10.81722
  10.6899      10.63712727  10.58021111  10.47279     10.33783     10.23821
  10.16114545  10.09682222  10.01119      9.95195454   9.90867778
   9.78432727   9.7119       9.66073636   9.6117       9.56527      9.48617
   9.30923      9.10663      8.94396      8.65804      8.48547      8.32779
   8.26895      8.1142       7.9203       7.58720909   7.40305      7.30855
   7.11273      6.93607      6.83795556   6.71164546   6.6677    ],
             mask = False,
       fill_value = 1e+20)
, False)
>>> g.autoscale(temp_bin)
>>> g.process_value(temp_bin)
(masked_array(data = [ 29.97656     29.89441818  29.82357     29.72123     29.61004     29.45418889
  28.89996364  28.23771111  27.78298     26.82286364  25.73447     25.06036
  23.15747     21.32857     18.7368      16.72475     15.92995556
  15.39765455  14.7768      13.99402727  13.20118     12.64432222
  11.83456364  11.19642222  10.90009     10.69556     10.5324      10.39967
  10.3107      10.17625556  10.08538     10.00309      9.88871818
   9.84666667   9.78888182   9.73368      9.58603333   9.45925      9.30373636
   9.09235556   8.93739091   8.74095556   8.61585454   8.47778889
   8.39589091   8.2087       8.06322      7.98623636   7.94438      7.87523333
   7.78714546   7.68472222   7.6604       7.63766667   7.55813      7.43941
  30.16992727  30.16882     30.13273     30.15671     30.11947778
  29.98783636  29.77614444  29.58772727  29.02516     28.37972     27.46698
  27.04875     26.16613333  23.79464     20.21448182  18.52976667  17.37596
  15.83005455  14.68467     13.01957     12.60402222  12.14701818  11.68835
  11.49214444  11.16060909  10.70395556  10.49130909  10.27682     10.10636
   9.9473       9.78003      9.67497      9.58769091   9.5188       9.48161818
   9.46928      9.4011       9.33032727   9.23785556   9.12879      8.98888
   8.85278182   8.71349      8.50846667   8.33964      8.20267273
   8.17391111   8.08104      7.93702      7.77745      7.72056      7.62049091
   7.49743      7.43928889   7.40435      7.34424      7.28255      7.19962727
  30.10458182  30.09812222  30.09614545  30.12243     30.16453333  30.16459
  30.1803      29.35749     28.79034444  28.4315      27.92582727  27.2293
  26.40667     24.44485455  20.8139      18.49324     16.38964     14.82201
  13.41217778  12.65541     12.07312     11.40316     11.03295     10.86176
  10.67055455  10.4419      10.34108     10.28843     10.27483     10.2244
  10.14806667  10.06299091   9.94388889   9.90377273   9.87403      9.80238
   9.75966      9.74708889   9.65335      9.5464       9.47881818   9.45791
   9.40277      9.29885      9.16609      9.01882222   8.8795       8.67948889
   8.46724546   8.13085556   7.90187      7.62349      7.46829091   7.37497
   7.19667778   7.08206364   6.99776     30.19495     30.19970909  30.17078
  30.13779     30.127       30.22082     30.10584444  29.31713     28.65025455
  27.91774444  26.82038     25.88102727  24.24985556  23.18661     21.92831818
  19.12667     15.66444     14.43742     13.27856     12.23208889
  11.42451818  11.16974     11.04172     10.99901111  10.91405455
  10.75896667  10.64501     10.59828182  10.5318      10.48826667  10.43804
  10.35661     10.22901     10.11263636  10.03643333   9.96255454   9.85358
   9.77511111   9.71347273   9.55135      9.47994      9.43571      9.3337
   9.2188       9.1155       8.95277778   8.78411818   8.66036      8.50167
   8.32092222   8.04417273   7.7818       7.42355455   7.1593       6.84277
   6.79897778   6.77698182  30.2985      30.24726     30.18959091
  30.13035556  30.26707     30.44577     30.19012727  28.92036     28.12156667
  27.68388     27.2706      26.36482     25.38171     23.62100909
  21.22406667  18.01861     15.91922     15.03643636  14.06563333  13.25404
  12.33918     12.05101     11.85749091  11.45797     11.1898      11.00517273
  10.91391     10.82943     10.7578      10.69306364  10.6305      10.53746364
  10.45638889  10.36282     10.3097      10.26747     10.11723333
  10.03718182  10.00506      9.9631       9.91862222   9.90068182   9.82491
   9.66125      9.49025      9.30931111   9.14553      8.87907      8.54493636
   8.22567      7.93167778   7.69467273   7.3491       7.06505454   6.8771
   6.83999091   6.80981      6.80617778  30.33326     30.32594444  30.30283
  30.26442     30.19545     30.23504545  30.18125556  28.81018     28.03610909
  27.04076     26.32842     25.26044     24.00298     22.04555     19.01834
  16.45026     14.53516667  13.74376     13.39852     13.01891     12.52294
  12.10103636  11.68491111  11.42501818  11.12411     10.92351     10.80854
  10.78692222  10.75503636  10.64897778  10.56215455  10.42191     10.37386667
  10.31562727  10.2241      10.1233       9.9846       9.85878      9.77407778
   9.60277273   9.49587778   9.16928182   8.83932222   8.62280909   8.4058
   8.13216364   7.94444444   7.81417273   7.61774444   7.42839      7.16741
   6.93563      6.86566      6.83961818   6.79311111   6.76786364   6.73891
  30.32781     30.32195     30.26249     30.19415455  30.18811111  30.24735
  30.31694     29.85670909  28.26096667  27.76397273  27.05521     26.35145
  25.68807778  23.40938182  20.14717     17.04897778  15.29740909
  13.57357778  12.47325455  12.25161111  12.01476     11.6723      11.35929
  11.11737273  10.92227     10.84402     10.77437778  10.70526     10.6794
  10.63664     10.56962     10.50855     10.41369     10.33567273
  10.31153333  10.2319      10.11963636  10.0613      10.02896      9.96614545
   9.89874444   9.83277      9.73327273   9.68432222   9.56005454
   9.39462222   9.22683      8.88305      8.66378182   8.26237      7.93338
   7.69059      7.38671111   7.04630909   6.88317778   6.82505455
   6.81958889  30.24612222  30.19041     30.18781818  30.24793333  30.45012
  30.12588     29.4867      29.13410909  28.7961      28.34541111
  27.91315455  27.34024444  26.23681     23.13474545  19.36251111  16.58336
  14.68115     14.00154     12.77761818  11.66641     11.50785     11.42563
  11.26745556  10.95691     10.86956364  10.82078889  10.76584545
  10.69434444  10.63290909  10.54897778  10.44276364  10.36343333
  10.27886364  10.20736     10.14042222  10.09699091   9.9976       9.8622
   9.66796      9.55157      9.49054      9.44738889   9.31841818   9.21154
   9.16491      8.95655      8.79106667   8.66211818   8.5233       8.15547273
   7.94692222   7.69819      7.44494546   7.29334      6.97301111
   6.82448182   6.8029      30.35451818  30.34334444  30.27607273
  30.22072222  30.19629     30.37945     30.12285     29.25699     28.56072727
  28.11021111  27.47817273  26.52745     25.37186     22.89303333  19.93778
  17.72709     16.45015     14.68658     13.47807273  13.02096667  12.89183
  12.70713636  12.19377     11.7222      11.45891818  11.116       10.94191
  10.82347     10.75141     10.71362     10.6617      10.53905     10.43879091
  10.37803333  10.31902     10.26109091  10.21768889  10.09426364   9.95789
   9.81225      9.73568      9.63659      9.55427      9.35103      9.00166667
   8.77231      8.59417      8.35052      7.95412      7.54551818   7.33374
   7.1628       6.93246364   6.86414444   6.8539       6.79132      6.74434546
   6.71435556  30.3226      30.28743333  30.21823636  30.20776     30.34635556
  30.27842727  29.86783333  28.84771     28.33684     28.00802727  27.05175
  26.32121111  24.71238182  21.47325556  18.52023     16.63619     15.04455
  14.03655     13.66685455  12.6211      12.04752     11.77202222
  11.70079091  11.431       11.19225455  10.97595     10.88995556  10.83432
  10.77351     10.72663636  10.70499     10.69398889  10.65648     10.58028182
  10.47645     10.43756     10.42595556  10.38220909  10.15421      9.93025556
   9.85966      9.84501      9.70051818   9.51435556   9.32310909   8.92158
   8.60711      8.38949      8.23246667   7.86388182   7.66487778
   7.59782727   7.5574       7.43529091   7.13055      6.90733      6.8347
  30.19182222  30.20379     30.19441818  30.18885556  30.22639     30.34873
  30.4559      29.87147     29.34135     28.8023      28.24692727  27.71328
  26.13205556  23.63541     20.44009091  18.35461     15.51135     14.54553
  13.31501111  12.68760909  12.25551111  11.75754     11.32932     11.10273
  10.97484545  10.91248889  10.8485      10.71998     10.59277273  10.49285
  10.42459     10.32123     10.23476667  10.2035      10.08051111  10.03259
   9.84616667   9.70371111   9.60804545   9.54006667   9.47988182   9.35124
   9.15079      9.04026      8.80375556   8.36020909   7.95016667
   7.81070909   7.69085556   7.67585      7.53697273   7.32598      7.00474444
   6.84379      6.76018182   6.69907778   6.65174546   6.56345     30.24434444
  30.23339091  30.17903     30.17517778  30.1649      30.21311818  29.83751
  29.59342222  29.1739      28.92854     28.61123     28.14996     26.58123
  23.07556364  20.47326     18.14759     16.15279     15.11062     14.46863
  13.86001111  12.94745455  11.84387778  11.28396     10.95902     10.81722
  10.6899      10.63712727  10.58021111  10.47279     10.33783     10.23821
  10.16114545  10.09682222  10.01119      9.95195454   9.90867778
   9.78432727   9.7119       9.66073636   9.6117       9.56527      9.48617
   9.30923      9.10663      8.94396      8.65804      8.48547      8.32779
   8.26895      8.1142       7.9203       7.58720909   7.40305      7.30855
   7.11273      6.93607      6.83795556   6.71164546   6.6677    ],
             mask = False,
       fill_value = 1e+20)
, False)
>>> r = clr.Colormap('Reds')
>>> r
<matplotlib.colors.Colormap object at 0x1045802d0>
>>> import matplotlib.cm as cm
>>> scale = cm.ScalarMappable(cmap='Reds')
>>> scale.to_rgba(temp_bin)
array([[ 0.44206075,  0.00922722,  0.05590158,  1.        ],
       [ 0.44968859,  0.01107266,  0.05688581,  1.        ],
       [ 0.44968859,  0.01107266,  0.05688581,  1.        ],
       ..., 
       [ 0.99975394,  0.95561707,  0.9337947 ,  1.        ],
       [ 0.99987697,  0.95820069,  0.93748559,  1.        ],
       [ 0.99987697,  0.95820069,  0.93748559,  1.        ]])
>>> sal_bin = npf2['sal']
>>> sal_bin
array([ 35.06353   ,  35.25406364,  35.41624   ,  35.51066   ,
        35.55531   ,  35.5586    ,  35.56618182,  35.63906667,
        35.69793   ,  35.77682727,  35.9078    ,  35.93296   ,
        35.89832   ,  35.74775   ,  35.53298   ,  35.32807   ,
        35.24536667,  35.19849091,  35.14365556,  35.07440909,
        35.00675   ,  34.95673333,  34.88682727,  34.82867778,
        34.80848   ,  34.78898   ,  34.77589091,  34.76502   ,
        34.75769   ,  34.74738889,  34.73984   ,  34.73371   ,
        34.72622727,  34.72404444,  34.72087273,  34.71726   ,
        34.709     ,  34.70153   ,  34.693     ,  34.68172222,
        34.6731    ,  34.66211111,  34.65532727,  34.64985556,
        34.64553636,  34.63706667,  34.63016   ,  34.62539091,
        34.62318   ,  34.61948889,  34.61542727,  34.6109    ,
        34.60919091,  34.60798889,  34.60487   ,  34.59885   ,
        34.73751818,  34.83528   ,  34.85913   ,  35.02812   ,
        35.16213333,  35.31979091,  35.41941111,  35.44818182,
        35.57866   ,  35.58617   ,  35.72557   ,  35.78783   ,
        35.86864444,  35.83288   ,  35.60257273,  35.46906667,
        35.3682    ,  35.24424545,  35.13624   ,  34.99487   ,
        34.94874444,  34.91409091,  34.87593   ,  34.85815556,
        34.83062727,  34.79372222,  34.77498182,  34.75695   ,
        34.74439   ,  34.73251111,  34.71983   ,  34.71218   ,
        34.70589091,  34.70184444,  34.69936364,  34.69859   ,
        34.69585556,  34.69161818,  34.68705556,  34.68144   ,
        34.67737   ,  34.66847273,  34.65895   ,  34.64811111,
        34.64217   ,  34.63247273,  34.63303333,  34.62999   ,
        34.62365   ,  34.61543   ,  34.61165   ,  34.60760909,
        34.60073   ,  34.59826667,  34.59641   ,  34.59422   ,
        34.59113   ,  34.58818182,  34.60229091,  34.67145556,
        34.73129091,  34.80052   ,  34.85505556,  34.89079   ,
        35.11437273,  35.48304   ,  35.58211111,  35.60023   ,
        35.6372    ,  35.73546667,  35.81625   ,  35.78815455,
        35.64555   ,  35.47688   ,  35.29857   ,  35.15618   ,
        35.01755556,  34.95381   ,  34.90307   ,  34.84834   ,
        34.81166   ,  34.79482   ,  34.78092727,  34.7607    ,
        34.75366   ,  34.74872   ,  34.74805   ,  34.74488182,
        34.74055556,  34.73647273,  34.72835556,  34.72577273,
        34.72368   ,  34.72001   ,  34.71763   ,  34.71647778,
        34.71187   ,  34.70582   ,  34.7019    ,  34.70045   ,
        34.69696   ,  34.69073   ,  34.68339   ,  34.67441111,
        34.66939091,  34.6621    ,  34.64982727,  34.63447778,
        34.62126   ,  34.60832   ,  34.5986    ,  34.59272   ,
        34.58497778,  34.58004545,  34.57661   ,  30.19495   ,
        30.19970909,  30.17078   ,  30.13779   ,  30.127     ,
        30.22082   ,  30.10584444,  29.31713   ,  28.65025455,
        27.91774444,  26.82038   ,  25.88102727,  24.24985556,
        23.18661   ,  21.92831818,  19.12667   ,  15.66444   ,
        14.43742   ,  13.27856   ,  12.23208889,  11.42451818,
        11.16974   ,  11.04172   ,  10.99901111,  10.91405455,
        10.75896667,  10.64501   ,  10.59828182,  10.5318    ,
        10.48826667,  10.43804   ,  10.35661   ,  10.22901   ,
        10.11263636,  10.03643333,   9.96255454,   9.85358   ,
         9.77511111,   9.71347273,   9.55135   ,   9.47994   ,
         9.43571   ,   9.3337    ,   9.2188    ,   9.1155    ,
         8.95277778,   8.78411818,   8.66036   ,   8.50167   ,
         8.32092222,   8.04417273,   7.7818    ,   7.42355455,
         7.1593    ,   6.84277   ,   6.79897778,   6.77698182,
        34.59522222,  34.62664   ,  34.63218182,  34.63705556,
        34.80016   ,  35.08907   ,  35.39775455,  35.42938   ,
        35.38201111,  35.35997   ,  35.40035   ,  35.51559   ,
        35.6725    ,  35.74691818,  35.69128889,  35.43679   ,
        35.25263   ,  35.16782727,  35.08735556,  35.0114    ,
        34.92334   ,  34.8907    ,  34.8698    ,  34.83958   ,
        34.81677778,  34.79691818,  34.78782   ,  34.7812    ,
        34.77745556,  34.77324545,  34.76886667,  34.76286364,
        34.75721111,  34.75231   ,  34.74835455,  34.74482   ,
        34.73661111,  34.731     ,  34.72908   ,  34.7264    ,
        34.7238    ,  34.72219091,  34.7187    ,  34.71098   ,
        34.70027   ,  34.69137778,  34.68247   ,  34.67003   ,
        34.65418182,  34.63552   ,  34.61763333,  34.60447273,
        34.58672222,  34.57545455,  34.56884444,  34.56967273,
        34.5691    ,  34.56875556,  34.60088   ,  34.61071111,
        34.61016   ,  34.62369   ,  34.64298   ,  34.74376364,
        35.27101111,  35.41712   ,  35.3664    ,  35.32924   ,
        35.42476   ,  35.61465   ,  35.74453   ,  35.7537    ,
        35.53435   ,  35.30737   ,  35.1287    ,  35.05359   ,
        35.01917   ,  34.98051   ,  34.93003   ,  34.89387273,
        34.85798889,  34.83400909,  34.80352   ,  34.78839   ,
        34.78007   ,  34.77812222,  34.77610909,  34.77054444,
        34.76459091,  34.75602   ,  34.75252222,  34.74910909,
        34.74343333,  34.73747   ,  34.73045455,  34.7227    ,
        34.71706667,  34.70816364,  34.70197778,  34.68752727,
        34.66883333,  34.65518182,  34.64291111,  34.62911818,
        34.61832222,  34.61002727,  34.59977778,  34.58846   ,
        34.5784    ,  34.57107   ,  34.57093   ,  34.56967273,
        34.56752222,  34.56714545,  34.56682   ,  34.61867   ,
        34.62764   ,  34.63272   ,  34.63996364,  34.66665556,
        34.77295   ,  35.22891   ,  35.45770909,  35.37196667,
        35.38040909,  35.48227   ,  35.61135   ,  35.68724444,
        35.76990909,  35.62344   ,  35.36625556,  35.1968    ,
        35.03861111,  34.93531818,  34.90774444,  34.88803   ,
        34.85654   ,  34.82999   ,  34.80734545,  34.78861   ,
        34.78279   ,  34.77905556,  34.77391   ,  34.77194   ,
        34.76886   ,  34.76461   ,  34.7606    ,  34.75502   ,
        34.7499    ,  34.74808889,  34.74295   ,  34.73615455,
        34.73306667,  34.73112   ,  34.72800909,  34.72462222,
        34.72073   ,  34.71476364,  34.71107778,  34.70437273,
        34.69547778,  34.68911   ,  34.67197   ,  34.65925455,
        34.63783   ,  34.61903   ,  34.6047    ,  34.58796667,
        34.57315455,  34.56994444,  34.56947273,  34.56908889,
        34.62383333,  34.63547   ,  34.67544545,  34.80846667,
        35.12643   ,  35.43326   ,  35.50379   ,  35.54727273,
        35.49644   ,  35.51273333,  35.5336    ,  35.60174444,
        35.68202   ,  35.7628    ,  35.56682222,  35.31581   ,
        35.13884   ,  35.07219   ,  34.96213636,  34.86284   ,
        34.84165   ,  34.83264   ,  34.81794444,  34.79563   ,
        34.78640909,  34.78304444,  34.77872727,  34.77387778,
        34.76960909,  34.7646    ,  34.75770909,  34.75214444,
        34.74704545,  34.74255   ,  34.73888889,  34.73596364,
        34.73121111,  34.72228182,  34.71196   ,  34.70453   ,
        34.70091   ,  34.69881111,  34.69167273,  34.68566   ,
        34.68268   ,  34.67459   ,  34.6652    ,  34.65862727,
        34.65167778,  34.6328    ,  34.6215    ,  34.60713   ,
        34.59352727,  34.58341   ,  34.57608889,  34.56927273,
        34.56836667,  34.62080909,  34.62907778,  34.62723636,
        34.62853333,  34.66579   ,  35.07436   ,  35.38794   ,
        35.42463   ,  35.38773636,  35.36416667,  35.35484545,
        35.47564   ,  35.65221   ,  35.77928889,  35.61006   ,
        35.38631   ,  35.29125   ,  35.13487   ,  35.01740909,
        34.97127778,  34.95781   ,  34.95441818,  34.90395   ,
        34.85912222,  34.83611818,  34.80487778,  34.78911   ,
        34.78096   ,  34.77604   ,  34.77337   ,  34.77029   ,
        34.76279   ,  34.7561    ,  34.75221111,  34.74889   ,
        34.74506364,  34.74171111,  34.73596364,  34.72798   ,
        34.72013   ,  34.71479   ,  34.70929   ,  34.70446   ,
        34.69618   ,  34.67835556,  34.66397   ,  34.65415   ,
        34.64057   ,  34.61596   ,  34.59661818,  34.58368   ,
        34.57741111,  34.5708    ,  34.57032222,  34.56963   ,
        34.56757   ,  34.56655455,  34.56551111,  34.61626   ,
        34.61933333,  34.63436364,  34.68818   ,  34.93611111,
        35.30674545,  35.47028889,  35.42781   ,  35.43162   ,
        35.50894545,  35.57559   ,  35.65594444,  35.73249091,
        35.72908889,  35.50333   ,  35.31968   ,  35.17291   ,
        35.07372   ,  35.04449091,  34.95426   ,  34.89314   ,
        34.86623333,  34.85723636,  34.83468889,  34.81217273,
        34.79409   ,  34.78705556,  34.7831    ,  34.77845   ,
        34.775     ,  34.77384   ,  34.77307778,  34.77149   ,
        34.7664    ,  34.75935   ,  34.75656   ,  34.75552222,
        34.75251818,  34.7401    ,  34.72815556,  34.72221   ,
        34.72059   ,  34.71442727,  34.70295556,  34.693     ,
        34.67234   ,  34.65607   ,  34.64387   ,  34.63476667,
        34.61791818,  34.60497778,  34.60075455,  34.59847778,
        34.59042727,  34.57911   ,  34.57156   ,  34.56906   ,
        34.59071111,  34.6147    ,  34.63709091,  34.64903333,
        34.69592   ,  34.88362   ,  35.19144   ,  35.47028   ,
        35.51146   ,  35.54864   ,  35.54284545,  35.59069   ,
        35.69333333,  35.76815   ,  35.657     ,  35.48036   ,
        35.22882   ,  35.12382   ,  35.02126667,  34.9531    ,
        34.91631111,  34.87349   ,  34.82869   ,  34.80441   ,
        34.79495455,  34.79004444,  34.78512   ,  34.77635   ,
        34.76849091,  34.76169   ,  34.75701   ,  34.75032   ,
        34.74458889,  34.74276364,  34.73597778,  34.73188   ,
        34.72266667,  34.71324444,  34.70804545,  34.704     ,
        34.70068182,  34.69243   ,  34.6835    ,  34.67689   ,
        34.66573333,  34.64282727,  34.62197778,  34.61209091,
        34.60572222,  34.60447   ,  34.59765455,  34.58745   ,
        34.57641111,  34.56875   ,  34.56721818,  34.56567778,
        34.5646    ,  34.56325   ,  34.63212222,  34.65053636,
        34.7222    ,  34.79144444,  34.82486   ,  35.21465455,
        35.42022   ,  35.48283333,  35.52329   ,  35.55037   ,
        35.55588   ,  35.57423   ,  35.64843   ,  35.75836364,
        35.63703   ,  35.45773   ,  35.27933   ,  35.17852   ,
        35.11805   ,  35.0622    ,  34.98189091,  34.88381111,
        34.8321    ,  34.8032    ,  34.78828   ,  34.77663   ,
        34.77282727,  34.7684    ,  34.76133   ,  34.75259   ,
        34.74653   ,  34.74099091,  34.73674444,  34.73164   ,
        34.72777273,  34.725     ,  34.71826364,  34.7138    ,
        34.71098182,  34.70783   ,  34.70509   ,  34.70095   ,
        34.69141   ,  34.6801    ,  34.67237   ,  34.65892   ,
        34.65131   ,  34.6442    ,  34.63926   ,  34.63041   ,
        34.61934444,  34.60245455,  34.59236   ,  34.58882   ,
        34.58198   ,  34.5716    ,  34.56578889,  34.56121818,  34.55987778])
>>> exit()
Samuels-MacBook-Pro:Programs SamHill$ 
  [Restored]
Last login: Thu Aug  6 21:42:53 on console
Samuels-MacBook-Pro:Programs SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> max_depth = -212
>>> max_depth % 10
8
>>> max_depth % -10
-2
>>> (max_depth + 13) % -10
-9
>>> (max_depth + 13) /-10
19
>>> (max_depth + 13) / -10.0
19.9
>>> ceiling(19.9)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ceiling' is not defined
>>> ceil(19.9)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ceil' is not defined
>>> math.ceil(19.9)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'math' is not defined
>>> import math
>>> math.ceil(19.9)
20.0
>>> bin_ranges = np.arange(-13, ceiling((min(Z) + 13) / -10.0), -10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'np' is not defined
>>> import numpy as np
>>> bin_ranges = np.arange(-13, ceiling((min(Z) + 13) / -10.0), -10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ceiling' is not defined
>>> bin_ranges = np.arange(-13, math.ceil((min(Z) + 13) / -10.0), -10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Z' is not defined
>>> exit()
Samuels-MacBook-Pro:Programs SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> bins = np.insert(np.arange(-13, math.ceil((min(Z) + 13) / -10.0), -10), 0, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'np' is not defined
>>> import numpy as np
>>> bins = np.insert(np.arange(-13, math.ceil(-212 + 13) / -10.0), -10), 0, 0)
  File "<stdin>", line 1
    bins = np.insert(np.arange(-13, math.ceil(-212 + 13) / -10.0), -10), 0, 0)
                                                                             ^
SyntaxError: invalid syntax
>>> bins = np.insert(np.arange(-13, (math.ceil(-212 + 13) / -10.0), -10), 0, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'math' is not defined
>>> import math
>>> bins = np.insert(np.arange(-13, (math.ceil(-212 + 13) / -10.0), -10), 0, 0)
>>> bins
array([ 0.])
>>> pre = np.arange(-13, (math.ceil(-212 + 13) / -10.0), -10)
>>> pre
array([], dtype=float64)
>>> pre = np.arange(-13, (math.ceil((-212 + 13) / -10.0) * 10), -10)
>>> pre
array([], dtype=float64)
>>> pre = np.arange(-13, (math.ceil((-212 + 13) / -10.0) * -10), -10)
>>> pre
array([ -13.,  -23.,  -33.,  -43.,  -53.,  -63.,  -73.,  -83.,  -93.,
       -103., -113., -123., -133., -143., -153., -163., -173., -183., -193.])
>>> pre = np.arange(-13, (math.ceil((-212 + 13) / 10.0) * 10), -10)
>>> pre
array([ -13.,  -23.,  -33.,  -43.,  -53.,  -63.,  -73.,  -83.,  -93.,
       -103., -113., -123., -133., -143., -153., -163., -173., -183.])
>>> bins = np.insert(np.arange(-13, (math.ceil((-212 + 13) / 10.0) * 10), -10), 0, 0)
>>> bins
array([   0.,  -13.,  -23.,  -33.,  -43.,  -53.,  -63.,  -73.,  -83.,
        -93., -103., -113., -123., -133., -143., -153., -163., -173., -183.])
>>> bins = np.insert(np.arange(-13, (math.ceil((-212 + 13) / 10.0)  * 10), -10), 0, 0)
>>> bins
array([   0.,  -13.,  -23.,  -33.,  -43.,  -53.,  -63.,  -73.,  -83.,
        -93., -103., -113., -123., -133., -143., -153., -163., -173., -183.])
>>> pre
array([ -13.,  -23.,  -33.,  -43.,  -53.,  -63.,  -73.,  -83.,  -93.,
       -103., -113., -123., -133., -143., -153., -163., -173., -183.])
>>> math.ceil((-212 + 13) / -10.0
... )
20.0
>>> * -10
  File "<stdin>", line 1
    * -10
    ^
SyntaxError: invalid syntax
>>> np.arange(-13, (math.ceil((-212 + 13) / 10.0) * 10), -10)
array([ -13.,  -23.,  -33.,  -43.,  -53.,  -63.,  -73.,  -83.,  -93.,
       -103., -113., -123., -133., -143., -153., -163., -173., -183.])
>>> 
>>> math.ceil((-212 + 13) / 10.0)
-19.0
>>> math.ceil((-212 + 13) / -10.0)
20.0
>>> (math.ceil((-212 + 13) / -10.0) * -10)
-200.0
>>> (math.ceil((-212 + 13) / -10.0) * -10) - 13
-213.0
>>> np.arange(-13, ((math.ceil((-212 + 13) / -10.0) * -10) - 13), -10)
array([ -13.,  -23.,  -33.,  -43.,  -53.,  -63.,  -73.,  -83.,  -93.,
       -103., -113., -123., -133., -143., -153., -163., -173., -183.,
       -193., -203.])
>>> (math.ceil(((-212 + 13) / -10.0) + 1) * -10) - 13
-223.0
>>> np.arange(-13, ((math.ceil(((-212 + 13) / -10.0) + 1) * -10) - 13), 10)
array([], dtype=float64)
>>> (math.ceil(((-212 + 13) / -10.0) + 1) * -10) - 13
-223.0
>>> np.arange(-13, ((math.ceil(((-212 + 13) / -10.0) + 1) * -10) - 13), -10)
array([ -13.,  -23.,  -33.,  -43.,  -53.,  -63.,  -73.,  -83.,  -93.,
       -103., -113., -123., -133., -143., -153., -163., -173., -183.,
       -193., -203., -213.])
>>> -212 + 3
-209
>>> -209 % 10
1
>>> -209 % -10.0
-9.0
>>> -209 % -10
-9
>>> exit()
Samuels-MacBook-Pro:Programs SamHill$ python
Python 2.7.10 |Anaconda 2.3.0 (x86_64)| (default, May 28 2015, 17:04:42) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> import numpy as np
>>> ((-212) + 3) % -10
-9
>>> (-212 + 3) % -10
-9
>>> (-212 + 3) % 10
1
>>> (-212 + 3) % -10.0
-9.0
>>> (-212 + 3) / -10
20
>>> num_bins = ((-212) + 3) / -10
>>> num_bins
20
>>> max_bin_depth = (num_bins * -10) - 3
>>> max_bin_depth
-203
>>> max_bin_depth = ((num_bins + 1) * -10) - 3
>>> max_bin_depth
-213
>>> np.arrange(-13, max_bin_depth, -10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'arrange'
>>> np.arange(-13, max_bin_depth, -10)
array([ -13,  -23,  -33,  -43,  -53,  -63,  -73,  -83,  -93, -103, -113,
       -123, -133, -143, -153, -163, -173, -183, -193, -203])
>>> np.arange(-13, max_bin_depth - 10, -10)
array([ -13,  -23,  -33,  -43,  -53,  -63,  -73,  -83,  -93, -103, -113,
       -123, -133, -143, -153, -163, -173, -183, -193, -203, -213])
>>> np.arange(-13, max_bin_depth - 1, -10)
array([ -13,  -23,  -33,  -43,  -53,  -63,  -73,  -83,  -93, -103, -113,
       -123, -133, -143, -153, -163, -173, -183, -193, -203, -213])
>>> num_bins = ((-212) + 3) / -10) + 1
  File "<stdin>", line 1
    num_bins = ((-212) + 3) / -10) + 1
                                 ^
SyntaxError: invalid syntax
>>> num_bins = ((-212 + 3) / -10) + 1
>>> num_bins
21
>>> num_bins = ((-212 + 3) / -10)
>>> num_bins
20
>>> max_bin_depth = (num_bins * -10) - 13
>>> max_bin_depth
-213
>>>  num_bins = ((-215 + 3) / -10)
  File "<stdin>", line 1
    num_bins = ((-215 + 3) / -10)
    ^
IndentationError: unexpected indent
>>> num_bins = ((-215 + 3) / -10)
>>> num_bins
21
>>> max_bin_depth = (num_bins * -10) - 13
>>> max_bin_depth
-223
>>> bins = np.insert(np.arange(-13, max_bin_depth - 1, -10), 0, 0)
>>> bins
array([   0,  -13,  -23,  -33,  -43,  -53,  -63,  -73,  -83,  -93, -103,
       -113, -123, -133, -143, -153, -163, -173, -183, -193, -203, -213,
       -223])
>>> bins[0]
0
>>> [0,1,2,3,4,5,6,7,8]
[0, 1, 2, 3, 4, 5, 6, 7, 8]
>>> a = [0,1,2,3,4,5,6,7,8]
>>> a[2:3]
[2]
>>> a[:3]
[0, 1, 2]
>>> a[2:]
[2, 3, 4, 5, 6, 7, 8]
>>> exit()
Samuels-MacBook-Pro:Programs SamHill$ 
